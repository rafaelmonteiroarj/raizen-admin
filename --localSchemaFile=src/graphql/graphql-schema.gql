"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type User {
  id: String!
  name: String!
  email: String!
  phoneNumber: String
  mobileNumber: String
  cpf: String
  avatar: String
  confirmed: Boolean!
  createdAt: String!
  updatedAt: String!
}

type UploadResponse {
  updated: Boolean!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
}

type PaginateUserResponse {
  itemsPerPage: Float!
  currentPage: Float!
  totalCount: Float!
  totalPages: Float!
  pageInfo: PageInfo!
  items: [User!]
}

type AuthType {
  user: User!
  access_token: String!
}

type Query {
  allUsers(page: Int = 1, limit: Int = 25): PaginateUserResponse!
  userById(id: String!): User!
  userByName(name: String!): [User!]!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  updateUser(data: UpdateUserInput!, id: String!): User!
  deleteUser(id: String!): Boolean!
  avatarUser(file: Upload!, id: String!): UploadResponse!
  forgotPassword(data: ForgoutPasswordInput!): Boolean!
  changePassword(data: ChangePasswordInput!): Boolean!
  confirmUser(token: String!): Boolean!
  login(data: AuthInput!): AuthType!
  refreshToken(token: String!): AuthType!
}

input CreateUserInput {
  name: String!
  email: String!
  cpf: String
  phoneNumber: String
  mobileNumber: String
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  cpf: String
  phoneNumber: String
  mobileNumber: String
  avatar: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ForgoutPasswordInput {
  email: String!
}

input ChangePasswordInput {
  token: String!
  password: String!
}

input AuthInput {
  email: String!
  password: String!
}
